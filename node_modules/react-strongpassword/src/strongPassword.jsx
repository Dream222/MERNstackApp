import React from "react";
import debounce from "lodash.debounce";
import zxcvbn from "zxcvbn";

require('./strongPassword.scss');


class StrongPassword extends React.Component {
    constructor(props) {
        super(props);

        this.state = Object.assign({}, this.getDefaultState());

        this.render = this.render.bind(this);
        this.handleChange = this.handleChange.bind(this);
        this.handleInputType = this.handleInputType.bind(this);
        this.addPasswordType = this.addPasswordType.bind(this);
        this.getMeterStyle = this.getMeterStyle.bind(this);
        this.handleToggleMask = this.handleToggleMask.bind(this);
        this.handleZxcvbn = this.handleZxcvbn.bind(this);
        this.getDefaultState = this.getDefaultState.bind(this);
    }

    getDefaultState() {
        return {
            value: (this.props.value) ? this.props.value : '',
            score: 0,
            entropy: 0,
            isPassword: true,
            isValid: false
        }
    }

    getMeterStyle(score) {
        let width = '15px';
        if (this.state.value.length > 0) {
            width = Math.min(24 * score + 4, 100) + '%';
        }

        let background = this.props.statusInactiveColor;
        if (this.state.value.length > 0) {
            if (this.state.isValid) {
                background = this.props.strengthStages[score].color;
            } else {
                background = this.props.statusInvalidColor;
            }
        }

        return {
            width: width,
            background: background
        }
    }

    addPasswordType() {
        this.setState({isPassword: true});
    }

    handleInputType() {
        this.setState({isPassword: !this.state.isPassword});
    }

    handleChange(e) {
        e.preventDefault();

        let native_target = e.nativeEvent.target;
        let val = e.target.value;

        this.setState({
            value: val,
            isValid: e.target.validity.valid,
            selectionStart: native_target.selectionStart,
            selectionEnd: native_target.selectionEnd
        });

        let score = this.handleZxcvbn(val);

        if (this.props.toggleMask) {
            this.handleToggleMask();
        }

        // call onChange prop passed from parent
        if (this.props.onChange) {
            this.props.onChange(e);
        }
    }

    handleToggleMask() {
        this.setState({
            isPassword: false
        });

        this.maskPassword();
    }

    handleZxcvbn(val) {
        let stats = zxcvbn(val);
        let currentScore = stats.score;

        this.setState({
            score: currentScore,
            entropy: stats.entropy
        });

        this.setState({isValid: (currentScore >= this.props.minScore)});

        // if score changed and callback provided
        if (this.props.onScoreChange && this.state.score !== currentScore) {
            this.props.onScoreChange(this.state.score, currentScore, val)
        }

        return currentScore;
    }

    componentWillMount() {
        if (this.props.toggleMask) {
            this.maskPassword = debounce(this.addPasswordType, this.props.unMaskTime);
        }
    }

    componentWillUnmount() {
        if (this.maskPassword) {
            this.maskPassword.cancel()
        }
    }

    componentDidMount() {
        var elementId = this.props.id;
        document.getElementById(elementId).dispatchEvent(new Event('input', {bubbles: true}));
    }

    render() {
        let infoBar;

        if (this.props.infoBar) {
            infoBar = (
                <table className="strongPassword__info">
                    <tbody>
                    <tr>
                        <td className="strongPassword__icon"><span/></td>
                        <td title={this.props.strengthStages[this.state.score].word}>
                            <div className="strongPassword__meter">
                                <span className="strongPassword__meterbar"
                                      style={this.getMeterStyle(this.state.score)}/>
                            </div>
                        </td>
                    </tr>
                    </tbody>
                </table>);
        }

        //workaround for problem with firefox resetting the input selection point
        var that = this;
        setTimeout(function () {
            if (!/Firefox/.test(navigator.userAgent)) return;
            var elem = that.refs[that.props.id].getDOMNode();
            elem.selectionStart = that.state.selectionStart;
            elem.selectionEnd = that.state.selectionEnd;
        }, 1);

        let className = 'strongPassword__input';
        if (this.props.className != undefined) {
            className = `${className} ${this.props.className}`;
        }
        if (!this.state.isPassword) {
            className = `${className} strongPassword__input-unmasked`;
        }

        return (
            <div className="strongPassword" data-valid={this.state.isValid}
                 data-score={this.state.score} data-entropy={this.state.entropy}>
                <input {...this.props}
                    required ref={this.props.id}
                    className={className} type={this.state.isPassword ? 'password' : 'text'}
                    value={this.state.value} pattern={`^.{${this.props.minLength},}$`}
                    title={`Password must be not less than ${this.props.minLength} characters long.`}
                    onChange={this.handleChange}
                />
                {infoBar}
            </div>
        );
    }
}

StrongPassword.defaultProps = {
    infoBar: true,
    statusInactiveColor: '#C0C0C0',
    statusInvalidColor: '#FF0000',
    minScore: 0,
    minLength: 6,
    toggleMask: true,
    unMaskTime: 1400,
    strengthStages: [
        {word: 'Weak', color: '#FF8800'},
        {word: 'Okay', color: '#FFFF00'},
        {word: 'Good', color: '#6666FF'},
        {word: 'Strong', color: '#009900'},
        {word: 'Great', color: '#00EE00'}],
    id: 'strongPassword__input'
};

StrongPassword.propTypes = {
    infoBar: React.PropTypes.bool,
    statusInactiveColor: React.PropTypes.string,
    minScore: React.PropTypes.number,
    onScoreChange: React.PropTypes.func,
    toggleMask: React.PropTypes.bool,
    unMaskTime: React.PropTypes.number,
    minLength: React.PropTypes.number,
    strengthLang: React.PropTypes.array,
    id: React.PropTypes.string
};

export default StrongPassword;
